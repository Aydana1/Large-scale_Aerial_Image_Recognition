1.8.0 True
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 2
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ()
  TRAIN: ('iSAID_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32], [64], [128], [256], [512]]
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_fpn_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: False
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 101
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res2', 'res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: FastRCNNConvFCHead
    NORM: 
    NUM_CONV: 0
    NUM_FC: 2
    POOLER_RESOLUTION: 7
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 128
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: StandardROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 15
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 4
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    CONV_DIMS: [-1]
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 1000
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 2000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: 
OUTPUT_DIR: outputs
SEED: -1
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.0025
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 100000
  MOMENTUM: 0.9
  NESTEROV: False
  REFERENCE_WORLD_SIZE: 0
  STEPS: ()
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: None
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
DeepLabV3plus_FPN(
  (backbone): IntermediateLayerGetter(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): DeepLabHeadV3Plus(
    (project): Sequential(
      (0): Conv2d(512, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (aspp1): ASPP(
      (convs): ModuleList(
        (0): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=1024, bias=False)
              (1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=1024, bias=False)
              (1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=1024, bias=False)
              (1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): ASPPPooling(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
      )
      (project): Sequential(
        (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.1, inplace=False)
      )
    )
    (aspp2): ASPP(
      (convs): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (1): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (2): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (3): ASPPConv(
          (0): AtrousSeparableConvolution(
            (body): Sequential(
              (0): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            )
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
        (4): ASPPPooling(
          (0): AdaptiveAvgPool2d(output_size=1)
          (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
      )
      (project): Sequential(
        (0): Conv2d(1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Dropout(p=0.1, inplace=False)
      )
    )
    (classifier): Sequential(
      (0): AtrousSeparableConvolution(
        (body): Sequential(
          (0): Conv2d(304, 304, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=304, bias=False)
          (1): Conv2d(304, 304, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (1): AtrousSeparableConvolution(
        (body): Sequential(
          (0): Conv2d(304, 304, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=304, bias=False)
          (1): Conv2d(304, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): ReLU(inplace=True)
      (4): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (novel): Sequential(
    (0): AdaptiveAvgPool2d(output_size=1)
    (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU(inplace=True)
    (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  )
  (conv1): Conv2d(48, 256, kernel_size=(1, 1), stride=(1, 1))
  (conv2): Conv2d(21, 256, kernel_size=(1, 1), stride=(1, 1))
)
[32m[11/25 23:33:48 d2.data.datasets.coco]: [0mLoading /apps/local/shared/CV703/datasets/iSAID/iSAID_patches/train/instancesonly_filtered_train.json takes 19.54 seconds.
[32m[11/25 23:33:48 d2.data.datasets.coco]: [0mLoaded 28029 images in COCO format from /apps/local/shared/CV703/datasets/iSAID/iSAID_patches/train/instancesonly_filtered_train.json
[32m[11/25 23:33:54 d2.data.build]: [0mRemoved 9300 images with no usable annotations. 18729 images left.
[32m[11/25 23:33:54 d2.data.build]: [0mDistribution of instances among all 15 categories:
[36m|   category    | #instances   |   category    | #instances   |   category    | #instances   |
|:-------------:|:-------------|:-------------:|:-------------|:-------------:|:-------------|
|     ship      | 79124        | storage_tank  | 13007        | baseball_di.. | 1122         |
| tennis_court  | 6445         | basketball_.. | 1487         | Ground_Trac.. | 1175         |
|    Bridge     | 4455         | Large_Vehicle | 80708        | Small_Vehicle | 474600       |
|  Helicopter   | 1437         | Swimming_pool | 4907         |  Roundabout   | 955          |
| Soccer_ball.. | 1574         |     plane     | 18437        |    Harbor     | 14995        |
|               |              |               |              |               |              |
|     total     | 704428       |               |              |               |              |[0m
[32m[11/25 23:33:54 d2.data.dataset_mapper]: [0m[DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[32m[11/25 23:33:54 d2.data.common]: [0mSerializing 18729 elements to byte tensors and concatenating them all ...
[32m[11/25 23:33:57 d2.data.common]: [0mSerialized dataset takes 325.11 MiB
[32m[11/25 23:34:00 d2.engine.train_loop]: [0mStarting training from iteration 0
[32m[11/25 23:46:15 d2.utils.events]: [0m eta: 20:48:52  iter: 999  total_loss: 1.476  loss_cls: 0.5486  loss_box_reg: 0.07467  loss_rpn_cls: 0.3386  loss_rpn_loc: 0.6033  time: 0.7313  data_time: 0.0015  lr: 0.0024975  max_mem: 17801M
[32m[11/25 23:58:34 d2.utils.events]: [0m eta: 20:39:32  iter: 1999  total_loss: 1.73  loss_cls: 0.7232  loss_box_reg: 0.2722  loss_rpn_cls: 0.2828  loss_rpn_loc: 0.4697  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 18318M
[32m[11/26 00:10:44 d2.utils.events]: [0m eta: 20:25:15  iter: 2999  total_loss: 1.611  loss_cls: 0.5983  loss_box_reg: 0.2976  loss_rpn_cls: 0.2423  loss_rpn_loc: 0.3196  time: 0.7334  data_time: 0.0014  lr: 0.0025  max_mem: 18318M
[32m[11/26 00:23:06 d2.utils.events]: [0m eta: 20:14:51  iter: 3999  total_loss: 1.749  loss_cls: 0.6196  loss_box_reg: 0.4463  loss_rpn_cls: 0.2115  loss_rpn_loc: 0.4564  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 18318M
[32m[11/26 00:35:24 d2.utils.events]: [0m eta: 20:00:44  iter: 4999  total_loss: 1.94  loss_cls: 0.7294  loss_box_reg: 0.3503  loss_rpn_cls: 0.2366  loss_rpn_loc: 0.3447  time: 0.7358  data_time: 0.0013  lr: 0.0025  max_mem: 18525M
[32m[11/26 00:47:41 d2.utils.events]: [0m eta: 19:48:45  iter: 5999  total_loss: 1.532  loss_cls: 0.5894  loss_box_reg: 0.312  loss_rpn_cls: 0.2234  loss_rpn_loc: 0.2703  time: 0.7360  data_time: 0.0015  lr: 0.0025  max_mem: 18525M
[32m[11/26 00:59:56 d2.utils.events]: [0m eta: 19:35:05  iter: 6999  total_loss: 1.559  loss_cls: 0.6599  loss_box_reg: 0.5683  loss_rpn_cls: 0.1872  loss_rpn_loc: 0.2221  time: 0.7358  data_time: 0.0014  lr: 0.0025  max_mem: 18525M
[32m[11/26 01:12:13 d2.utils.events]: [0m eta: 19:22:30  iter: 7999  total_loss: 1.852  loss_cls: 0.7847  loss_box_reg: 0.5149  loss_rpn_cls: 0.2142  loss_rpn_loc: 0.3635  time: 0.7360  data_time: 0.0015  lr: 0.0025  max_mem: 18603M
[32m[11/26 01:24:25 d2.utils.events]: [0m eta: 19:06:00  iter: 8999  total_loss: 1.573  loss_cls: 0.6673  loss_box_reg: 0.3972  loss_rpn_cls: 0.1934  loss_rpn_loc: 0.2913  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 18906M
[32m[11/26 01:36:42 d2.utils.events]: [0m eta: 18:53:03  iter: 9999  total_loss: 1.631  loss_cls: 0.6619  loss_box_reg: 0.4322  loss_rpn_cls: 0.2127  loss_rpn_loc: 0.3438  time: 0.7355  data_time: 0.0014  lr: 0.0025  max_mem: 18906M
[32m[11/26 01:48:59 d2.utils.events]: [0m eta: 18:42:11  iter: 10999  total_loss: 1.901  loss_cls: 0.6645  loss_box_reg: 0.4684  loss_rpn_cls: 0.235  loss_rpn_loc: 0.3373  time: 0.7356  data_time: 0.0014  lr: 0.0025  max_mem: 18906M
[32m[11/26 02:01:10 d2.utils.events]: [0m eta: 18:30:16  iter: 11999  total_loss: 1.664  loss_cls: 0.6697  loss_box_reg: 0.3755  loss_rpn_cls: 0.2141  loss_rpn_loc: 0.2745  time: 0.7353  data_time: 0.0015  lr: 0.0025  max_mem: 18906M
[32m[11/26 02:13:23 d2.utils.events]: [0m eta: 18:17:16  iter: 12999  total_loss: 1.378  loss_cls: 0.5919  loss_box_reg: 0.2802  loss_rpn_cls: 0.1981  loss_rpn_loc: 0.1951  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 18906M
[32m[11/26 02:25:38 d2.utils.events]: [0m eta: 18:05:07  iter: 13999  total_loss: 1.814  loss_cls: 0.6266  loss_box_reg: 0.4665  loss_rpn_cls: 0.1933  loss_rpn_loc: 0.3139  time: 0.7351  data_time: 0.0016  lr: 0.0025  max_mem: 18906M
[32m[11/26 02:37:53 d2.utils.events]: [0m eta: 17:52:33  iter: 14999  total_loss: 1.712  loss_cls: 0.673  loss_box_reg: 0.4813  loss_rpn_cls: 0.1844  loss_rpn_loc: 0.2484  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 19825M
[32m[11/26 02:50:09 d2.utils.events]: [0m eta: 17:40:07  iter: 15999  total_loss: 1.804  loss_cls: 0.7672  loss_box_reg: 0.4033  loss_rpn_cls: 0.2035  loss_rpn_loc: 0.3144  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 19825M
[32m[11/26 03:02:25 d2.utils.events]: [0m eta: 17:27:29  iter: 16999  total_loss: 1.813  loss_cls: 0.6781  loss_box_reg: 0.4747  loss_rpn_cls: 0.2155  loss_rpn_loc: 0.2346  time: 0.7351  data_time: 0.0014  lr: 0.0025  max_mem: 19825M
[32m[11/26 03:14:41 d2.utils.events]: [0m eta: 17:15:11  iter: 17999  total_loss: 1.812  loss_cls: 0.734  loss_box_reg: 0.463  loss_rpn_cls: 0.2173  loss_rpn_loc: 0.2588  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 19825M
[32m[11/26 03:26:55 d2.utils.events]: [0m eta: 17:01:50  iter: 18999  total_loss: 1.645  loss_cls: 0.7108  loss_box_reg: 0.4453  loss_rpn_cls: 0.1933  loss_rpn_loc: 0.2931  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 19825M
[32m[11/26 03:39:10 d2.utils.events]: [0m eta: 16:49:13  iter: 19999  total_loss: 1.359  loss_cls: 0.5915  loss_box_reg: 0.3127  loss_rpn_cls: 0.1825  loss_rpn_loc: 0.2661  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 19825M
[32m[11/26 03:51:23 d2.utils.events]: [0m eta: 16:36:25  iter: 20999  total_loss: 1.666  loss_cls: 0.6913  loss_box_reg: 0.4678  loss_rpn_cls: 0.214  loss_rpn_loc: 0.2771  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 19825M
[32m[11/26 04:03:38 d2.utils.events]: [0m eta: 16:24:28  iter: 21999  total_loss: 1.68  loss_cls: 0.5975  loss_box_reg: 0.4559  loss_rpn_cls: 0.1733  loss_rpn_loc: 0.2381  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 19825M
[32m[11/26 04:05:51 d2.utils.memory]: [0mAttempting to copy inputs of <function pairwise_iou at 0x7fb269b6df80> to CPU due to CUDA OOM
[32m[11/26 04:15:57 d2.utils.events]: [0m eta: 16:08:43  iter: 22999  total_loss: 1.524  loss_cls: 0.5397  loss_box_reg: 0.3182  loss_rpn_cls: 0.1448  loss_rpn_loc: 0.2401  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 04:28:09 d2.utils.events]: [0m eta: 15:59:00  iter: 23999  total_loss: 1.675  loss_cls: 0.634  loss_box_reg: 0.4379  loss_rpn_cls: 0.2101  loss_rpn_loc: 0.3112  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 04:40:30 d2.utils.events]: [0m eta: 15:46:54  iter: 24999  total_loss: 1.558  loss_cls: 0.6985  loss_box_reg: 0.4579  loss_rpn_cls: 0.1746  loss_rpn_loc: 0.2878  time: 0.7351  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 04:52:45 d2.utils.events]: [0m eta: 15:33:45  iter: 25999  total_loss: 1.772  loss_cls: 0.8082  loss_box_reg: 0.4367  loss_rpn_cls: 0.1622  loss_rpn_loc: 0.3788  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 05:04:59 d2.utils.events]: [0m eta: 15:20:57  iter: 26999  total_loss: 1.441  loss_cls: 0.5446  loss_box_reg: 0.3168  loss_rpn_cls: 0.2  loss_rpn_loc: 0.2966  time: 0.7351  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 05:17:12 d2.utils.events]: [0m eta: 15:08:14  iter: 27999  total_loss: 1.588  loss_cls: 0.6163  loss_box_reg: 0.4538  loss_rpn_cls: 0.1958  loss_rpn_loc: 0.2574  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 05:29:30 d2.utils.events]: [0m eta: 14:55:50  iter: 28999  total_loss: 1.838  loss_cls: 0.6875  loss_box_reg: 0.3875  loss_rpn_cls: 0.2627  loss_rpn_loc: 0.4382  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 05:41:40 d2.utils.events]: [0m eta: 14:41:46  iter: 29999  total_loss: 1.499  loss_cls: 0.6028  loss_box_reg: 0.3657  loss_rpn_cls: 0.1819  loss_rpn_loc: 0.2824  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 05:53:56 d2.utils.events]: [0m eta: 14:27:56  iter: 30999  total_loss: 1.442  loss_cls: 0.6757  loss_box_reg: 0.3906  loss_rpn_cls: 0.152  loss_rpn_loc: 0.1853  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 06:06:11 d2.utils.events]: [0m eta: 14:17:57  iter: 31999  total_loss: 1.675  loss_cls: 0.6845  loss_box_reg: 0.4931  loss_rpn_cls: 0.1568  loss_rpn_loc: 0.2993  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 06:18:30 d2.utils.events]: [0m eta: 14:05:34  iter: 32999  total_loss: 1.55  loss_cls: 0.5906  loss_box_reg: 0.477  loss_rpn_cls: 0.1775  loss_rpn_loc: 0.2544  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 06:30:45 d2.utils.events]: [0m eta: 13:52:59  iter: 33999  total_loss: 1.369  loss_cls: 0.5773  loss_box_reg: 0.3515  loss_rpn_cls: 0.1524  loss_rpn_loc: 0.2389  time: 0.7350  data_time: 0.0016  lr: 0.0025  max_mem: 20273M
[32m[11/26 06:43:03 d2.utils.events]: [0m eta: 13:40:25  iter: 34999  total_loss: 1.542  loss_cls: 0.5935  loss_box_reg: 0.3765  loss_rpn_cls: 0.1837  loss_rpn_loc: 0.2444  time: 0.7351  data_time: 0.0016  lr: 0.0025  max_mem: 20273M
[32m[11/26 06:55:20 d2.utils.events]: [0m eta: 13:27:07  iter: 35999  total_loss: 1.496  loss_cls: 0.5665  loss_box_reg: 0.4083  loss_rpn_cls: 0.1585  loss_rpn_loc: 0.236  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 07:07:33 d2.utils.events]: [0m eta: 13:14:54  iter: 36999  total_loss: 1.536  loss_cls: 0.6094  loss_box_reg: 0.3816  loss_rpn_cls: 0.123  loss_rpn_loc: 0.2638  time: 0.7351  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 07:19:43 d2.utils.events]: [0m eta: 13:01:30  iter: 37999  total_loss: 1.569  loss_cls: 0.6569  loss_box_reg: 0.4644  loss_rpn_cls: 0.1728  loss_rpn_loc: 0.2129  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 07:31:58 d2.utils.events]: [0m eta: 12:49:18  iter: 38999  total_loss: 1.755  loss_cls: 0.7283  loss_box_reg: 0.5539  loss_rpn_cls: 0.191  loss_rpn_loc: 0.2611  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 07:44:19 d2.utils.events]: [0m eta: 12:36:46  iter: 39999  total_loss: 1.477  loss_cls: 0.6674  loss_box_reg: 0.3936  loss_rpn_cls: 0.1577  loss_rpn_loc: 0.2622  time: 0.7351  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 07:56:31 d2.utils.events]: [0m eta: 12:23:53  iter: 40999  total_loss: 1.578  loss_cls: 0.6504  loss_box_reg: 0.4323  loss_rpn_cls: 0.1603  loss_rpn_loc: 0.2156  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 08:08:49 d2.utils.events]: [0m eta: 12:11:02  iter: 41999  total_loss: 1.587  loss_cls: 0.6772  loss_box_reg: 0.3668  loss_rpn_cls: 0.2487  loss_rpn_loc: 0.3454  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 08:20:58 d2.utils.events]: [0m eta: 11:57:12  iter: 42999  total_loss: 1.457  loss_cls: 0.6385  loss_box_reg: 0.407  loss_rpn_cls: 0.2059  loss_rpn_loc: 0.2356  time: 0.7349  data_time: 0.0016  lr: 0.0025  max_mem: 20273M
[32m[11/26 08:33:14 d2.utils.events]: [0m eta: 11:46:33  iter: 43999  total_loss: 1.448  loss_cls: 0.5904  loss_box_reg: 0.4776  loss_rpn_cls: 0.1633  loss_rpn_loc: 0.2167  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 08:45:31 d2.utils.events]: [0m eta: 11:33:51  iter: 44999  total_loss: 1.581  loss_cls: 0.6971  loss_box_reg: 0.3801  loss_rpn_cls: 0.1635  loss_rpn_loc: 0.2876  time: 0.7349  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 08:57:46 d2.utils.events]: [0m eta: 11:21:04  iter: 45999  total_loss: 1.457  loss_cls: 0.6617  loss_box_reg: 0.4231  loss_rpn_cls: 0.1552  loss_rpn_loc: 0.247  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 09:09:58 d2.utils.events]: [0m eta: 11:08:44  iter: 46999  total_loss: 1.603  loss_cls: 0.6739  loss_box_reg: 0.3749  loss_rpn_cls: 0.1964  loss_rpn_loc: 0.2455  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 09:22:13 d2.utils.events]: [0m eta: 10:55:46  iter: 47999  total_loss: 1.498  loss_cls: 0.6297  loss_box_reg: 0.4058  loss_rpn_cls: 0.1767  loss_rpn_loc: 0.2437  time: 0.7349  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 09:34:33 d2.utils.events]: [0m eta: 10:43:33  iter: 48999  total_loss: 1.683  loss_cls: 0.7041  loss_box_reg: 0.4173  loss_rpn_cls: 0.1651  loss_rpn_loc: 0.2598  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 09:46:49 d2.utils.events]: [0m eta: 10:30:41  iter: 49999  total_loss: 1.718  loss_cls: 0.6565  loss_box_reg: 0.4213  loss_rpn_cls: 0.2291  loss_rpn_loc: 0.3087  time: 0.7350  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 09:59:15 d2.utils.events]: [0m eta: 10:18:40  iter: 50999  total_loss: 1.508  loss_cls: 0.5886  loss_box_reg: 0.3607  loss_rpn_cls: 0.1999  loss_rpn_loc: 0.223  time: 0.7352  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 10:11:46 d2.utils.events]: [0m eta: 10:07:11  iter: 51999  total_loss: 1.695  loss_cls: 0.7012  loss_box_reg: 0.4747  loss_rpn_cls: 0.2246  loss_rpn_loc: 0.3282  time: 0.7355  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 10:24:03 d2.utils.events]: [0m eta: 9:53:23  iter: 52999  total_loss: 1.601  loss_cls: 0.5637  loss_box_reg: 0.4855  loss_rpn_cls: 0.1889  loss_rpn_loc: 0.2091  time: 0.7355  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 10:36:14 d2.utils.events]: [0m eta: 9:40:34  iter: 53999  total_loss: 1.667  loss_cls: 0.6536  loss_box_reg: 0.444  loss_rpn_cls: 0.1649  loss_rpn_loc: 0.2469  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 10:48:29 d2.utils.events]: [0m eta: 9:27:45  iter: 54999  total_loss: 1.702  loss_cls: 0.6504  loss_box_reg: 0.4518  loss_rpn_cls: 0.208  loss_rpn_loc: 0.2714  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 11:00:39 d2.utils.events]: [0m eta: 9:14:50  iter: 55999  total_loss: 1.396  loss_cls: 0.6173  loss_box_reg: 0.4339  loss_rpn_cls: 0.1769  loss_rpn_loc: 0.2579  time: 0.7353  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 11:12:59 d2.utils.events]: [0m eta: 9:03:22  iter: 56999  total_loss: 1.591  loss_cls: 0.7261  loss_box_reg: 0.5165  loss_rpn_cls: 0.1423  loss_rpn_loc: 0.2557  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 11:25:12 d2.utils.events]: [0m eta: 8:50:23  iter: 57999  total_loss: 1.42  loss_cls: 0.5707  loss_box_reg: 0.4043  loss_rpn_cls: 0.1611  loss_rpn_loc: 0.1923  time: 0.7353  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 11:37:24 d2.utils.events]: [0m eta: 8:37:35  iter: 58999  total_loss: 1.552  loss_cls: 0.6636  loss_box_reg: 0.5273  loss_rpn_cls: 0.1531  loss_rpn_loc: 0.2169  time: 0.7353  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 11:49:38 d2.utils.events]: [0m eta: 8:25:12  iter: 59999  total_loss: 1.475  loss_cls: 0.5998  loss_box_reg: 0.399  loss_rpn_cls: 0.1485  loss_rpn_loc: 0.2803  time: 0.7353  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 12:01:53 d2.utils.events]: [0m eta: 8:12:30  iter: 60999  total_loss: 1.511  loss_cls: 0.6263  loss_box_reg: 0.4596  loss_rpn_cls: 0.1682  loss_rpn_loc: 0.2505  time: 0.7352  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 12:14:11 d2.utils.events]: [0m eta: 7:59:32  iter: 61999  total_loss: 1.586  loss_cls: 0.6831  loss_box_reg: 0.4361  loss_rpn_cls: 0.1703  loss_rpn_loc: 0.2941  time: 0.7353  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 12:26:22 d2.utils.events]: [0m eta: 7:46:47  iter: 62999  total_loss: 1.497  loss_cls: 0.6296  loss_box_reg: 0.4242  loss_rpn_cls: 0.1663  loss_rpn_loc: 0.2393  time: 0.7352  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 12:38:36 d2.utils.events]: [0m eta: 7:34:13  iter: 63999  total_loss: 1.598  loss_cls: 0.6863  loss_box_reg: 0.397  loss_rpn_cls: 0.1655  loss_rpn_loc: 0.2748  time: 0.7352  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 12:51:04 d2.utils.events]: [0m eta: 7:21:57  iter: 64999  total_loss: 1.401  loss_cls: 0.5973  loss_box_reg: 0.4247  loss_rpn_cls: 0.162  loss_rpn_loc: 0.175  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 13:03:18 d2.utils.events]: [0m eta: 7:09:01  iter: 65999  total_loss: 1.554  loss_cls: 0.608  loss_box_reg: 0.4637  loss_rpn_cls: 0.1527  loss_rpn_loc: 0.2058  time: 0.7353  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 13:15:42 d2.utils.events]: [0m eta: 6:56:36  iter: 66999  total_loss: 1.402  loss_cls: 0.6166  loss_box_reg: 0.4244  loss_rpn_cls: 0.1451  loss_rpn_loc: 0.191  time: 0.7355  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 13:27:55 d2.utils.events]: [0m eta: 6:43:53  iter: 67999  total_loss: 1.426  loss_cls: 0.6073  loss_box_reg: 0.4462  loss_rpn_cls: 0.1653  loss_rpn_loc: 0.2234  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 13:40:10 d2.utils.events]: [0m eta: 6:31:07  iter: 68999  total_loss: 1.587  loss_cls: 0.6572  loss_box_reg: 0.4506  loss_rpn_cls: 0.1727  loss_rpn_loc: 0.2189  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 13:52:24 d2.utils.events]: [0m eta: 6:18:40  iter: 69999  total_loss: 1.567  loss_cls: 0.636  loss_box_reg: 0.3994  loss_rpn_cls: 0.1693  loss_rpn_loc: 0.2624  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 14:04:39 d2.utils.events]: [0m eta: 6:06:03  iter: 70999  total_loss: 1.268  loss_cls: 0.566  loss_box_reg: 0.3789  loss_rpn_cls: 0.1359  loss_rpn_loc: 0.2218  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 14:16:53 d2.utils.events]: [0m eta: 5:53:29  iter: 71999  total_loss: 1.434  loss_cls: 0.5418  loss_box_reg: 0.3857  loss_rpn_cls: 0.1983  loss_rpn_loc: 0.2371  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 14:29:12 d2.utils.events]: [0m eta: 5:40:56  iter: 72999  total_loss: 1.504  loss_cls: 0.6156  loss_box_reg: 0.3925  loss_rpn_cls: 0.1496  loss_rpn_loc: 0.2354  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 14:41:23 d2.utils.events]: [0m eta: 5:28:03  iter: 73999  total_loss: 1.538  loss_cls: 0.6921  loss_box_reg: 0.4695  loss_rpn_cls: 0.1357  loss_rpn_loc: 0.1961  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 14:53:42 d2.utils.events]: [0m eta: 5:15:36  iter: 74999  total_loss: 1.837  loss_cls: 0.7024  loss_box_reg: 0.542  loss_rpn_cls: 0.1647  loss_rpn_loc: 0.2634  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 15:05:59 d2.utils.events]: [0m eta: 5:02:59  iter: 75999  total_loss: 1.563  loss_cls: 0.6608  loss_box_reg: 0.4304  loss_rpn_cls: 0.1585  loss_rpn_loc: 0.2272  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 15:18:14 d2.utils.events]: [0m eta: 4:50:14  iter: 76999  total_loss: 1.445  loss_cls: 0.6272  loss_box_reg: 0.3527  loss_rpn_cls: 0.1626  loss_rpn_loc: 0.2522  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 15:30:30 d2.utils.events]: [0m eta: 4:37:40  iter: 77999  total_loss: 1.556  loss_cls: 0.5925  loss_box_reg: 0.4812  loss_rpn_cls: 0.1469  loss_rpn_loc: 0.2266  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20273M
[32m[11/26 15:42:43 d2.utils.events]: [0m eta: 4:25:03  iter: 78999  total_loss: 1.522  loss_cls: 0.6495  loss_box_reg: 0.386  loss_rpn_cls: 0.1717  loss_rpn_loc: 0.3143  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20273M
[32m[11/26 15:54:58 d2.utils.events]: [0m eta: 4:12:20  iter: 79999  total_loss: 1.45  loss_cls: 0.5843  loss_box_reg: 0.366  loss_rpn_cls: 0.1811  loss_rpn_loc: 0.2175  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 16:07:14 d2.utils.events]: [0m eta: 3:59:52  iter: 80999  total_loss: 1.633  loss_cls: 0.657  loss_box_reg: 0.4943  loss_rpn_cls: 0.1326  loss_rpn_loc: 0.1525  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 16:19:34 d2.utils.events]: [0m eta: 3:47:16  iter: 81999  total_loss: 1.733  loss_cls: 0.7174  loss_box_reg: 0.4567  loss_rpn_cls: 0.1615  loss_rpn_loc: 0.1961  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 16:31:51 d2.utils.events]: [0m eta: 3:34:38  iter: 82999  total_loss: 1.527  loss_cls: 0.5883  loss_box_reg: 0.5031  loss_rpn_cls: 0.1452  loss_rpn_loc: 0.216  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 16:44:07 d2.utils.events]: [0m eta: 3:22:02  iter: 83999  total_loss: 1.408  loss_cls: 0.5878  loss_box_reg: 0.367  loss_rpn_cls: 0.1481  loss_rpn_loc: 0.2365  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 16:56:24 d2.utils.events]: [0m eta: 3:09:33  iter: 84999  total_loss: 1.521  loss_cls: 0.5781  loss_box_reg: 0.416  loss_rpn_cls: 0.1616  loss_rpn_loc: 0.2215  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 17:08:36 d2.utils.events]: [0m eta: 2:56:49  iter: 85999  total_loss: 1.39  loss_cls: 0.615  loss_box_reg: 0.416  loss_rpn_cls: 0.1938  loss_rpn_loc: 0.2282  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 17:20:53 d2.utils.events]: [0m eta: 2:44:08  iter: 86999  total_loss: 1.667  loss_cls: 0.6301  loss_box_reg: 0.4372  loss_rpn_cls: 0.1932  loss_rpn_loc: 0.2543  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 17:33:12 d2.utils.events]: [0m eta: 2:31:36  iter: 87999  total_loss: 1.409  loss_cls: 0.5773  loss_box_reg: 0.4272  loss_rpn_cls: 0.1756  loss_rpn_loc: 0.2075  time: 0.7355  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 17:45:30 d2.utils.events]: [0m eta: 2:19:00  iter: 88999  total_loss: 1.509  loss_cls: 0.6183  loss_box_reg: 0.4623  loss_rpn_cls: 0.1721  loss_rpn_loc: 0.2701  time: 0.7355  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 17:57:48 d2.utils.events]: [0m eta: 2:06:23  iter: 89999  total_loss: 1.634  loss_cls: 0.6393  loss_box_reg: 0.4387  loss_rpn_cls: 0.1825  loss_rpn_loc: 0.2531  time: 0.7355  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 18:10:01 d2.utils.events]: [0m eta: 1:53:42  iter: 90999  total_loss: 1.517  loss_cls: 0.6118  loss_box_reg: 0.4833  loss_rpn_cls: 0.1319  loss_rpn_loc: 0.1975  time: 0.7355  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 18:22:11 d2.utils.events]: [0m eta: 1:41:03  iter: 91999  total_loss: 1.683  loss_cls: 0.6653  loss_box_reg: 0.4632  loss_rpn_cls: 0.2023  loss_rpn_loc: 0.2849  time: 0.7354  data_time: 0.0014  lr: 0.0025  max_mem: 20930M
[32m[11/26 18:34:31 d2.utils.events]: [0m eta: 1:28:29  iter: 92999  total_loss: 1.286  loss_cls: 0.5728  loss_box_reg: 0.3743  loss_rpn_cls: 0.1526  loss_rpn_loc: 0.1761  time: 0.7355  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 18:46:46 d2.utils.events]: [0m eta: 1:15:49  iter: 93999  total_loss: 1.532  loss_cls: 0.6853  loss_box_reg: 0.4998  loss_rpn_cls: 0.189  loss_rpn_loc: 0.218  time: 0.7354  data_time: 0.0015  lr: 0.0025  max_mem: 20930M
[32m[11/26 18:59:01 d2.utils.events]: [0m eta: 1:03:11  iter: 94999  total_loss: 1.631  loss_cls: 0.6668  loss_box_reg: 0.4398  loss_rpn_cls: 0.1713  loss_rpn_loc: 0.2691  time: 0.7354  data_time: 0.0016  lr: 0.0025  max_mem: 20930M
